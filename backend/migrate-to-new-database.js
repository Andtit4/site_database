const { exec } = require('child_process');
const { promisify } = require('util');
const path = require('path');

const execPromise = promisify(exec);

/**
 * Script pour migrer vers une nouvelle base de donn√©es PostgreSQL
 * Ce script va ex√©cuter la migration compl√®te pour cr√©er toutes les tables
 */

async function runMigration() {
    console.log('üöÄ D√©marrage de la migration vers la nouvelle base de donn√©es PostgreSQL...\n');

    try {
        // √âtape 1: V√©rifier la configuration de la base de donn√©es
        console.log('üìã V√©rification de la configuration...');

        const dbConfig = {
            host: process.env.DATABASE_HOST || 'localhost',
            port: process.env.DATABASE_PORT || '5432',
            username: process.env.DATABASE_USERNAME || 'postgres',
            password: process.env.DATABASE_PASSWORD || 'root',
            database: process.env.DATABASE_NAME || 'AndTit',
        };

        console.log(`   - H√¥te: ${dbConfig.host}:${dbConfig.port}`);
        console.log(`   - Base de donn√©es: ${dbConfig.database}`);
        console.log(`   - Utilisateur: ${dbConfig.username}\n`);

        // √âtape 2: Ex√©cuter la migration
        console.log('üîÑ Ex√©cution de la migration initiale...');
        const { stdout, stderr } = await execPromise('npm run migration:run');

        if (stderr && !stderr.includes('WARNING')) {
            console.error('‚ùå Erreur lors de la migration:', stderr);

            return;
        }

        console.log('‚úÖ Migration ex√©cut√©e avec succ√®s !');
        console.log(stdout);

        // √âtape 3: V√©rification
        console.log('\nüìä V√©rification des tables cr√©√©es...');
        await verifyTables();

        console.log('\nüéâ Migration termin√©e avec succ√®s !');
        console.log('\nüìù Tables cr√©√©es:');
        console.log('   ‚Ä¢ department - Gestion des d√©partements');
        console.log('   ‚Ä¢ team - Gestion des √©quipes');
        console.log('   ‚Ä¢ users - Gestion des utilisateurs');
        console.log('   ‚Ä¢ site - Gestion des sites');
        console.log('   ‚Ä¢ equipment - Gestion des √©quipements');
        console.log('   ‚Ä¢ notifications - Syst√®me de notifications');
        console.log('   ‚Ä¢ site_custom_fields - Champs personnalis√©s pour les sites');
        console.log('   ‚Ä¢ site_custom_field_backup - Sauvegarde des champs personnalis√©s');
        console.log('   ‚Ä¢ team_sites - Relation √©quipes/sites');
        console.log('   ‚Ä¢ team_equipment - Relation √©quipes/√©quipements');
        console.log('   ‚Ä¢ site_custom_field_departments - Relation champs/d√©partements');

        console.log('\n‚ú® Votre base de donn√©es est pr√™te √† √™tre utilis√©e !');

    } catch (error) {
        console.error('‚ùå Erreur lors de la migration:', error.message);
        process.exit(1);
    }
}

async function verifyTables() {
    try {
        const { Client } = require('pg');

        const client = new Client({
            host: process.env.DATABASE_HOST || 'localhost',
            port: parseInt(process.env.DATABASE_PORT || '5432', 10),
            user: process.env.DATABASE_USERNAME || 'postgres',
            password: process.env.DATABASE_PASSWORD || 'root',
            database: process.env.DATABASE_NAME || 'site_info_db',
        });

        await client.connect();

        const result = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        `);

        console.log(`   ‚úÖ ${result.rows.length} tables trouv√©es`);
        result.rows.forEach(row => {
            console.log(`      - ${row.table_name}`);
        });

        await client.end();
    } catch (error) {
        console.log('   ‚ö†Ô∏è  Impossible de v√©rifier les tables (normal si pg n\'est pas install√©)');
    }
}

// Fonction pour afficher l'aide
function showHelp() {
    console.log(`
üóÑÔ∏è  Migration vers nouvelle base de donn√©es PostgreSQL

USAGE:
    node migrate-to-new-database.js

VARIABLES D'ENVIRONNEMENT:
    DATABASE_HOST       H√¥te de la base de donn√©es (d√©faut: localhost)
    DATABASE_PORT       Port de la base de donn√©es (d√©faut: 5432)
    DATABASE_USERNAME   Nom d'utilisateur (d√©faut: postgres)
    DATABASE_PASSWORD   Mot de passe (d√©faut: root)
    DATABASE_NAME       Nom de la base de donn√©es (d√©faut: site_info_db)

EXEMPLE:
    # Avec variables d'environnement
    DATABASE_HOST=localhost DATABASE_NAME=ma_nouvelle_db node migrate-to-new-database.js

PR√âREQUIS:
    ‚úÖ PostgreSQL install√© et d√©marr√©
    ‚úÖ Base de donn√©es cr√©√©e
    ‚úÖ Variables d'environnement configur√©es
    ‚úÖ D√©pendances npm install√©es
    `);
}

// Gestion des arguments de ligne de commande
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    process.exit(0);
}

// Ex√©cution du script
runMigration();
