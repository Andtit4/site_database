const { Client } = require('pg');
require('dotenv').config();

async function setupDatabase() {
    console.log('üîç Configuration PostgreSQL pour Laragon...');

    // Configuration par d√©faut de Laragon
    const defaultConfig = {
        host: process.env.DATABASE_HOST || 'localhost',
        port: parseInt(process.env.DATABASE_PORT || '5432'),
        user: process.env.DATABASE_USERNAME || 'postgres',
        password: process.env.DATABASE_PASSWORD || 'root',
    };

    console.log('üìã Configuration utilis√©e:', {
        host: defaultConfig.host,
        port: defaultConfig.port,
        user: defaultConfig.user,
        password: '***'
    });

    try {
        // 1. Connexion √† la base par d√©faut pour cr√©er notre base
        console.log('üîå Test de connexion √† PostgreSQL...');
        const adminClient = new Client({
            ...defaultConfig,
            database: 'postgres' // Base par d√©faut
        });

        await adminClient.connect();
        console.log('‚úÖ Connexion PostgreSQL r√©ussie !');

        // 2. V√©rifier si la base existe
        const dbName = process.env.DATABASE_NAME || 'site_db_info';
        console.log(`üîç V√©rification de la base de donn√©es "${dbName}"...`);

        const checkDbQuery = 'SELECT 1 FROM pg_database WHERE datname = $1';
        const result = await adminClient.query(checkDbQuery, [dbName]);

        if (result.rows.length === 0) {
            // 3. Cr√©er la base de donn√©es
            console.log(`üìä Cr√©ation de la base de donn√©es "${dbName}"...`);
            await adminClient.query(`CREATE DATABASE "${dbName}"`);
            console.log('‚úÖ Base de donn√©es cr√©√©e avec succ√®s !');
        } else {
            console.log('‚úÖ Base de donn√©es d√©j√† existante.');
        }

        await adminClient.end();

        // 4. Test de connexion √† notre base
        console.log('üîå Test de connexion √† notre base de donn√©es...');
        const appClient = new Client({
            ...defaultConfig,
            database: dbName
        });

        await appClient.connect();
        console.log('‚úÖ Connexion √† la base applicative r√©ussie !');

        // Afficher les informations de version
        const versionResult = await appClient.query('SELECT version()');
        console.log('üêò Version PostgreSQL:', versionResult.rows[0].version.split(' ')[0]);

        await appClient.end();

        console.log('\nüéâ Configuration PostgreSQL termin√©e avec succ√®s !');
        console.log('üöÄ Vous pouvez maintenant d√©marrer le backend avec: npm run start:dev');

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);

        if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° Solutions possibles:');
            console.log('   1. V√©rifiez que PostgreSQL est d√©marr√© dans Laragon');
            console.log('   2. V√©rifiez le port PostgreSQL dans Laragon (d√©faut: 5432)');
            console.log('   3. V√©rifiez les identifiants dans le fichier .env');
        } else if (error.code === '28P01') {
            console.log('\nüí° Erreur d\'authentification:');
            console.log('   - V√©rifiez le mot de passe PostgreSQL dans Laragon');
            console.log('   - Mettez √† jour le fichier .env avec les bons identifiants');
        }

        process.exit(1);
    }
}

setupDatabase();