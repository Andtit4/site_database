const mysql = require('mysql2/promise');
require('dotenv').config();

async function ultimateReset() {
    const config = {
        host: process.env.DATABASE_HOST || 'localhost',
        port: parseInt(process.env.DATABASE_PORT) || 3306,
        user: process.env.DATABASE_USERNAME || 'root',
        password: process.env.DATABASE_PASSWORD || '',
    };

    const dbName = process.env.DATABASE_NAME || 'u527740812_site_info_db';

    let connection;

    try {
        console.log('üîÑ Connexion √† MySQL...');
        connection = await mysql.createConnection(config);

        // 1. Connecter √† la base sp√©cifique pour supprimer toutes les tables manuellement
        try {
            await connection.query(`USE ${dbName}`);

            console.log('üîç Recherche de toutes les tables...');
            const [tables] = await connection.query('SHOW TABLES');

            if (tables.length > 0) {
                // D√©sactiver les contraintes de cl√©s √©trang√®res
                console.log('üîì D√©sactivation des contraintes de cl√©s √©trang√®res...');
                await connection.query('SET FOREIGN_KEY_CHECKS = 0');

                // Supprimer toutes les tables une par une
                console.log(`üóëÔ∏è Suppression de ${tables.length} table(s)...`);
                for (const table of tables) {
                    const tableName = Object.values(table)[0];
                    console.log(`   Suppression: ${tableName}`);
                    await connection.query(`DROP TABLE IF EXISTS ${tableName}`);
                }

                // R√©activer les contraintes
                console.log('üîí R√©activation des contraintes de cl√©s √©trang√®res...');
                await connection.query('SET FOREIGN_KEY_CHECKS = 1');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Base de donn√©es inaccessible (peut-√™tre d√©j√† supprim√©e)');
        }

        // 2. Supprimer compl√®tement la base de donn√©es
        console.log('üí• Suppression totale de la base de donn√©es...');
        await connection.query(`DROP DATABASE IF EXISTS ${dbName}`);

        console.log('‚è≥ Attente de 3 secondes...');
        await new Promise(resolve => setTimeout(resolve, 3000));

        // 3. Recr√©er une base compl√®tement neuve
        console.log('üèóÔ∏è Cr√©ation d\'une nouvelle base de donn√©es...');
        await connection.query(`CREATE DATABASE ${dbName} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`);

        // 4. V√©rification finale
        await connection.query(`USE ${dbName}`);
        const [finalTables] = await connection.query('SHOW TABLES');

        if (finalTables.length === 0) {
            console.log('‚úÖ SUCC√àS ! La base de donn√©es est maintenant compl√®tement vide.');
        } else {
            console.log('‚ùå √âCHEC ! Il reste encore des tables...');
            finalTables.forEach(table => {
                console.log(`  - ${Object.values(table)[0]}`);
            });
        }

    } catch (error) {
        console.error('‚ùå Erreur lors du reset ultime:', error.message);
        process.exit(1);
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

ultimateReset();