const { Client } = require('pg');
const path = require('path');

/**
 * Script pour nettoyer compl√®tement la base de donn√©es PostgreSQL
 * Ce script supprime toutes les tables, types, contraintes, etc.
 */

async function cleanDatabase() {
    console.log('üßπ Nettoyage de la base de donn√©es PostgreSQL...\n');

    try {
        const client = new Client({
            host: process.env.DATABASE_HOST || 'localhost',
            port: parseInt(process.env.DATABASE_PORT || '5432', 10),
            user: process.env.DATABASE_USERNAME || 'postgres',
            password: process.env.DATABASE_PASSWORD || 'root',
            database: process.env.DATABASE_NAME || 'AndTit',
        });

        await client.connect();
        console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

        // 1. Supprimer toutes les contraintes de cl√©s √©trang√®res
        console.log('\nüîó Suppression des contraintes de cl√©s √©trang√®res...');
        const constraintsResult = await client.query(`
            SELECT 
                tc.table_name, 
                tc.constraint_name
            FROM information_schema.table_constraints AS tc 
            WHERE tc.constraint_type = 'FOREIGN KEY'
            AND tc.table_schema = 'public'
        `);

        for (const constraint of constraintsResult.rows) {
            try {
                await client.query(`ALTER TABLE "${constraint.table_name}" DROP CONSTRAINT IF EXISTS "${constraint.constraint_name}"`);
                console.log(`   ‚úì Contrainte ${constraint.constraint_name} supprim√©e`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  Erreur lors de la suppression de la contrainte ${constraint.constraint_name}`);
            }
        }

        // 2. Supprimer toutes les tables
        console.log('\nüìã Suppression des tables...');
        const tablesResult = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            AND table_name != 'migrations'
        `);

        for (const table of tablesResult.rows) {
            try {
                await client.query(`DROP TABLE IF EXISTS "${table.table_name}" CASCADE`);
                console.log(`   ‚úì Table ${table.table_name} supprim√©e`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  Erreur lors de la suppression de la table ${table.table_name}`);
            }
        }

        // 3. Supprimer tous les types ENUM personnalis√©s
        console.log('\nüî§ Suppression des types ENUM...');
        const enumsToDelete = [
            'equipment_type_enum',
            'notification_type_enum',
            'notification_priority_enum',
            'custom_field_type_enum'
        ];

        for (const enumType of enumsToDelete) {
            try {
                await client.query(`DROP TYPE IF EXISTS "${enumType}" CASCADE`);
                console.log(`   ‚úì Type ENUM ${enumType} supprim√©`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  Type ENUM ${enumType} n'existait pas ou erreur`);
            }
        }

        // 4. Supprimer tous les index personnalis√©s
        console.log('\nüìä Suppression des index...');
        const indexesResult = await client.query(`
            SELECT indexname 
            FROM pg_indexes 
            WHERE schemaname = 'public' 
            AND indexname LIKE 'IDX_%'
        `);

        for (const index of indexesResult.rows) {
            try {
                await client.query(`DROP INDEX IF EXISTS "${index.indexname}"`);
                console.log(`   ‚úì Index ${index.indexname} supprim√©`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  Erreur lors de la suppression de l'index ${index.indexname}`);
            }
        }

        // 5. Nettoyer la table des migrations TypeORM
        console.log('\nüîÑ Nettoyage de la table des migrations...');
        try {
            await client.query(`DELETE FROM migrations WHERE name LIKE '%Initial%'`);
            console.log('   ‚úì Migrations initiales supprim√©es de la table des migrations');
        } catch (error) {
            console.log('   ‚ö†Ô∏è  Table des migrations n\'existe pas encore (normal)');
        }

        await client.end();

        console.log('\nüéâ Nettoyage termin√© avec succ√®s !');
        console.log('\nüìù Actions effectu√©es:');
        console.log('   ‚úÖ Contraintes de cl√©s √©trang√®res supprim√©es');
        console.log('   ‚úÖ Tables supprim√©es (sauf migrations)');
        console.log('   ‚úÖ Types ENUM supprim√©s');
        console.log('   ‚úÖ Index personnalis√©s supprim√©s');
        console.log('   ‚úÖ Entr√©es de migration nettoy√©es');

        console.log('\nüöÄ Vous pouvez maintenant ex√©cuter la migration:');
        console.log('   npm run migration:run');
        console.log('   ou');
        console.log('   npm run migrate:new-db');

    } catch (error) {
        console.error('‚ùå Erreur lors du nettoyage:', error.message);
        process.exit(1);
    }
}

// Fonction pour afficher l'aide
function showHelp() {
    console.log(`
üßπ Nettoyage complet de la base de donn√©es PostgreSQL

USAGE:
    node reset-database-clean.js

VARIABLES D'ENVIRONNEMENT:
    DATABASE_HOST       H√¥te de la base de donn√©es (d√©faut: localhost)
    DATABASE_PORT       Port de la base de donn√©es (d√©faut: 5432)
    DATABASE_USERNAME   Nom d'utilisateur (d√©faut: postgres)
    DATABASE_PASSWORD   Mot de passe (d√©faut: root)
    DATABASE_NAME       Nom de la base de donn√©es (d√©faut: AndTit)

‚ö†Ô∏è  ATTENTION: Ce script supprime TOUTES les donn√©es !

EXEMPLE:
    DATABASE_NAME=ma_db node reset-database-clean.js

APR√àS LE NETTOYAGE:
    npm run migration:run
    `);
}

// Gestion des arguments de ligne de commande
const args = process.argv.slice(2);
if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    process.exit(0);
}

// Demander confirmation
const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('‚ö†Ô∏è  ATTENTION: Ce script va supprimer TOUTES les tables et donn√©es de la base de donn√©es !');
console.log(`Base de donn√©es cible: ${process.env.DATABASE_NAME || 'AndTit'}`);

rl.question('\n‚ùì √ätes-vous s√ªr de vouloir continuer? (oui/non): ', (answer) => {
    if (answer.toLowerCase() === 'oui' || answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y') {
        rl.close();
        cleanDatabase();
    } else {
        console.log('‚ùå Op√©ration annul√©e');
        rl.close();
        process.exit(0);
    }
});
